package hackerrank.medium;

import epp.Pair;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class LargestRectangle {
    public static void main(String[] args) {
        System.out.println(largestRectangle(new ArrayList<>(List.of(1, 2, 3, 4, 5))));
        System.out.println(largestRectangle(new ArrayList<>(List.of(3,2,3))));
        System.out.println(largestRectangle(new ArrayList<>(List.of(11 ,11, 10, 10, 10))));
        System.out.println(largestRectangle(new ArrayList<>(List.of
       /* System.out.println(largestRectangle(new ArrayList<>(List.of(6873, 7005, 1372, 5438, 1323, 9238, 9184, 2396,
                4605, 162, 7170, 9421, 4012, 5302, 6277, 2438, 4409, 3391, 4956, 4488, 622, 9365, 5088, 6926, 2691, 6909, 1050, 2824, 3538, 5801, 8468, 411, 9158, 9841, 2201, 481, 5431, 1385, 2877, 36, 1547, 48, 5809, 1911, 1702, 8439, 4349, 6111, 1830, 5657, 6951, 8804, 5022, 8391, 2083, 7713, 5300, 3133, 6890, 5190, 5286, 1710, 1953, 4445, 7903, 4154, 4926, 3335, 5539, 4156, 9723, 3438, 556, 1885, 5349, 2258, 324, 6050, 4722, 8506, 1707, 1673, 7310, 3081, 65, 9393, 7147, 1717, 8878, 389, 6908, 4165, 2099, 5213, 8610, 3, 9368, 3536, 9690, 1259))));
   */ }

    public static long largestRectangle(List<Integer> h) {
        // Write your code here

        Stack<Pair<Integer,Integer>> stack = new Stack<>();
        int maxArea = 0;
        for(int i=0;i<h.size();i++){
            Pair<Integer,Integer> building = new Pair<>(h.get(i),i);
            while (!stack.isEmpty()&& stack.peek().getFirst()>building.getFirst()){
                stack.pop();

            }
            Stack<Pair<Integer,Integer>> copy = new Stack<>();
            int maxAreaForCurrentBuilding = 0;
            while (!stack.isEmpty()){
                Pair<Integer, Integer> previous = stack.pop();
                int height = Math.min(building.getFirst(), previous.getFirst());
                int width =  stack.isEmpty()? building.getSecond()+1:  building.getSecond()-stack.peek().getSecond();
                int area = height * width;
                maxAreaForCurrentBuilding=Math.max(maxAreaForCurrentBuilding,area);
               copy.push(previous);

            }


            if(maxAreaForCurrentBuilding>maxArea){
                maxArea = maxAreaForCurrentBuilding;

            }



            while (!copy.isEmpty()){
                stack.push(copy.pop());
            }
            if(stack.isEmpty() || stack.peek().getFirst()< building.getFirst()){
                stack.push(building);
            }

        }
        return maxArea;

    }
}
